---
openapi: 3.0.2
info:
  title: InnovareMiddleware
  version: 1.0.0
  description: |-
    Effettuiamo una nuova classificazione passando il nome del modello
    da voler utilizzare.
paths:
  /allsample/{idcanale}:
    get:
      parameters:
      - name: idcanale
        in: path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sample'
          description: Restituisce tutti i Sample di un dato canale.
      operationId: allsamples
      summary: Restituisce tutti i Sample di un certo canale
      description: Id del canale selezionato.
    parameters:
    - name: idcanale
      in: path
      required: true
  /lastsample/{idcanale}:
    get:
      parameters:
      - name: idcanale
        schema:
          type: string
        in: path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
          description: Json of the last misure.
      operationId: lastsample
      description: |
        Return json of the last misure.
    parameters:
    - name: idcanale
      in: path
      required: true
  /lastsamples/{idcanale}:
    get:
      parameters:
      - name: idcanale
        schema:
          type: string
        in: path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sample'
          description: Ultimi Samples del canale che non sono ancora stati visualizzati.
      operationId: lastsamples
      description: Id Channel di riferimento.
  /daysamples/{idcanale}:
    summary: Ritorna i Samples della giornata corrente
    get:
      parameters:
      - name: idcanale
        in: path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sample'
          description: Samples of the current day.
      operationId: daysamples
    parameters:
    - name: idcanale
      in: path
      required: true
  /lastClassification:
    summary: Return the last classification
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassificationSint'
          description: Json of last classification.
      operationId: lastclassificazion
      summary: Return the last classification
  /setModel/{modelName}:
    get:
      responses:
        "200":
          description: Modello selezionato.
      operationId: setModel
      summary: Selezione modello.
    parameters:
    - name: modelName
      in: path
      required: true
  /models:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
          description: Restituisce un json con tutti i modelli presenti nel sistema.
      operationId: getModels
      summary: Restituisce tutti i modelli utilizzabili
  /models/selected:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Ritorna il json del modello attualmente selezionato.
      operationId: selectedModel
      summary: Ritorna il json del modello attualmente selezionato
  /logout:
    get:
      responses:
        "200":
          description: Conferma dell'avvenuto logout.
      operationId: logout
      summary: Logout dal sistema.
  /login:
    summary: Login nel sistema.
    get:
      parameters:
      - name: username
        description: ""
        schema:
          type: string
        in: query
        required: true
      - name: password
        description: ""
        schema:
          type: string
        in: query
        required: true
      responses:
        "200":
          description: Login is done correctly.
      operationId: login
    parameters:
    - name: username
      description: ""
      schema:
        type: string
      in: query
      required: true
    - name: password
      description: ""
      schema:
        type: string
      in: query
      required: true
  /startIrrigation:
    get:
      responses:
        "200":
          description: RIchiesta avvio irrigazione inviata
      operationId: startIrrigation
      summary: Avvio irrigazione
  /stopIrrigation:
    get:
      responses:
        "200":
          description: Richiesta di stop all'irrigazione inviata.
      operationId: stopIrrigation
  /statoIrrigazione:
    get:
      responses:
        "200":
          description: RIchiesta stato irrigazione
      operationId: getStatoIrrigazione
      summary: RIchiesta stato irrigazione.
  /allIrrigationStates:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Irrigation'
          description: Storico irrigazioni
      operationId: irrigationStorico
      summary: Storico irrigazioni
  /newClassification/{datasetName}:
    summary: Genera una nuova classificazione sintetica a partire da un dataset selezionato.
    get:
      parameters:
      - name: datasetName
        in: path
        required: true
      responses:
        "200":
          description: Classificazione andata a buon fine.
      operationId: newclassificationSint
      summary: Genera una nuova classificazione sintetica.
    parameters:
    - name: datasetName
      in: path
      required: true
  /newClassificationArray/{dataset}:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classification'
          description: "Restituisce l'array json contenente le singole classificazioni\
            \ per ogni immagine \ndedotta dalla segmanetazione."
      operationId: newclassification
      summary: Genera una lista di classificazioni di tutte le immagini segmentate
        dal dataset.
    parameters:
    - name: dataset
      in: path
      required: true
  /newModel/{fileName}:
    summary: Aggiunta nuovo modello per la classificazione in formato .zip
    get:
      responses:
        "200":
          description: Aggiunta nuovo modello in formato .zip
      operationId: newModel
      summary: Aggiunta modello in formato .zip
    parameters:
    - name: fileName
      in: path
      required: true
  /configurations:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigurationItem'
          description: Configuration response
      operationId: getConfigurations
      description: Return the actual configuration.
  /classifications:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassificationSint'
          description: Restituisce l'array di tutte le classificazioni
      operationId: getClassifications
      summary: Restituisce tutte le classificazioni
  /classifications/{date}:
    summary: Restituisce tutte le classificazioni di una certa data
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassificationSint'
          description: Restituisce tutte le classificationi in base alla data
      operationId: getClassificationsByDate
    parameters:
    - name: date
      description: In millisencond dal timestamp
      in: path
      required: true
  /lastIrrigation:
    get:
      responses:
        "200":
          description: Ultima irrigazione
      operationId: lastIrrigation
      summary: Ultima irrigazione
  /irrigationTime:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: "Recupero dell'orario in cui, ogni giorno, ha inizio l'irrigazione"
      operationId: irrigationTime
      summary: "Recupero dell'orario in cui, ogni giorno, ha inizio l'irrigazione"
  /channelsNumber:
    get:
      responses:
        "200":
          description: Restituisce array con il numero dei canali attivi
      operationId: channelsNum
      summary: Richiesta numero di canali attivi
  /setIrrigationTime/{irrigationTime}:
    get:
      responses:
        "200":
          description: Modifica orario avvenuta con successo.
      operationId: setIrrigationTime
      summary: Imposta l'orario di avvio dell'irrigazione.
    parameters:
    - name: irrigationTime
      in: path
      required: true
components:
  schemas:
    ConfigurationItem:
      description: "Configurazione piattaforma, comprende il gateway e il modello"
      required:
      - id
      - properties
      type: object
      properties:
        id:
          description: ""
          type: string
        properties:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Property'
      example:
      - id: sensor-gateway
        properties:
        - id: indirizzo
          value: 192.168.55.5
        - id: porta
          value: "8888"
    Property:
      description: ""
      required:
      - id
      type: object
      properties:
        id:
          description: ""
          type: string
        value:
          description: ""
          type: string
    User:
      description: ""
      required:
      - username
      - password
      - role
      type: object
      properties:
        username:
          description: ""
          type: string
        password:
          format: password
          description: ""
          type: string
        role:
          description: ""
          enum:
          - USER
          - ADMIN
          type: string
      example:
        password: iUPse124#
        role: ADMIN
        username: administrator
    Sample:
      description: Dato di misurazione di test.
      type: object
      example:
        timestamp: 2020-10-16 16:13:11.781
        misure: 30
        channel: "0"
    Classification:
      description: Result of a classification process.
      type: object
      example:
        date: 2020/09/11
        path: /home/stefano/Scrivania/Lavoro/IMMAGINI-TestPythonScript/d3/2020_09_11_Dataset_FondatanaDeiFieri-Thermal_Optical-Fila_3_4-Session1-DJI_0831-plant_1.jpg
        hash: 1ec6cc13769ab7310345101d32509080
        classification:
          classifications:
          - classe: "0"
            score: 23.196931183338165
          - classe: "1"
            score: 23.196931183338165
          - classe: "2"
            score: 23.196931183338165
          - classe: "3"
            score: 23.196931183338165
          - classe: "4"
            score: 23.196931183338165
          hash: '''1ec6cc13769ab7310345101d32509080'''
        originalImage: /home/stefano/Scrivania/Lavoro/IMMAGINI-TestPythonScript/d3/2020_09_11_Dataset_FondatanaDeiFieri-Thermal_Optical-Fila_3_4-Session1-DJI_0831-erased_background_with_boxes.jpg
        model: modelName
    Model:
      description: Modello di classificazione utilizzato dal sistema
      type: object
    Irrigation:
      description: ""
      type: object
      example: "{\n    \"inizioIrrig\":231241114,\n    \"fineIrrig\":431241114,\n\t\
        \"quantita\":20.0,\n}"
    ClassificationSint:
      title: Root Type for ClassificationSint
      description: Classificazione sintetica di una dataset di piante.
      type: object
      properties:
        status:
          type: string
        date:
          type: object
          properties:
            year:
              format: int32
              type: integer
            month:
              type: string
            monthValue:
              format: int32
              type: integer
            dayOfMonth:
              format: int32
              type: integer
            chronology:
              type: object
              properties:
                id:
                  type: string
                calendarType:
                  type: string
            dayOfWeek:
              type: string
            leapYear:
              type: boolean
            dayOfYear:
              format: int32
              type: integer
            era:
              type: string
        percCarenza:
          format: int32
          type: integer
        percSane:
          format: int32
          type: integer
        percEccesso:
          format: int32
          type: integer
        percScartate:
          format: int32
          type: integer
        percInfestanti:
          format: int32
          type: integer
        model:
          type: string
      example:
        status: SCARTATE
        date: 1598824800000
        percCarenza: 0
        percSane: 0
        percEccesso: 0
        percScartate: 100
        percInfestanti: 0
        model: stub.h5
